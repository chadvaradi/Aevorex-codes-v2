name: FinanceHub CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  rule-validation:
    name: YAML Rules Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install PyYAML
        run: pip install pyyaml
      - name: Run Rule0 validation script
        run: python scripts/validate_rule0.py

  rule008-audit:
    name: Rule #008 Compliance Audit
    runs-on: ubuntu-latest
    needs: [rule-validation]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install pyyaml
      - name: Run Rule #008 audit
        run: python scripts/rule008_audit.py

  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    needs: [rule-validation, rule008-audit]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          cd modules/financehub/backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff black

      - name: Run ruff linting
        run: |
          cd modules/financehub/backend
          ruff check . --output-format=github

      - name: Run black formatting check
        run: |
          cd modules/financehub/backend
          black --check --diff .

      - name: Run tests with coverage
        run: |
          cd modules/financehub/backend
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./modules/financehub/backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    needs: [rule-validation, rule008-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: |
          cd shared/frontend
          pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd shared/frontend
          pnpm lint

      - name: Run TypeScript check
        run: |
          cd shared/frontend
          pnpm typecheck

      - name: Run tests
        run: |
          cd shared/frontend
          pnpm test

      - name: Build application
        run: |
          cd shared/frontend
          pnpm build

      - name: Run Lighthouse CI
        run: |
          cd shared/frontend
          pnpm lighthouse-ci

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        run: |
          cd modules/financehub/backend
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd shared/frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - name: Start backend server
        run: |
          cd modules/financehub/backend
          python -m uvicorn main:app --host 0.0.0.0 --port 8084 &
          sleep 10

      - name: Build and start frontend
        run: |
          cd shared/frontend
          pnpm build
          pnpm preview --port 8083 &
          sleep 5

      - name: Run E2E tests
        run: |
          cd tests/e2e
          npx playwright test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here 